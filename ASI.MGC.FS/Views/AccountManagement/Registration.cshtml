@model ASI.MGC.FS.Models.UserRegistartionViewModal
@{
    ViewBag.Title = "Registration";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.currPage = "Add New User";
}
<link href="~/Content/bootstrapValidator.min.css" rel="stylesheet" />
<link href="~/Content/formValidation.min.css" rel="stylesheet" />
<div class="container">
    <div id="main">
        <!-- start:breadcrumb -->
        <ol class="breadcrumb">
            <li><a href="#">Home</a></li>
            <li class="active">@ViewBag.currPage</li>
        </ol>
        <fieldset>
            <legend>Add New User</legend>
            <div class="row">
                <div class="container">
                    @*@using (Ajax.BeginForm("SaveRegistration", "AccountManagement", null, new AjaxOptions { OnSuccess = "OnSuccess", OnFailure = "OnFailure" }, new { id = "formRegistration", @class = "form-horizontal", enctype = "multipart/form-data" }))*@
                    @using (Html.BeginForm("Registration", "AccountManagement", null, FormMethod.Post, new { id = "formRegistration", @class = "form-horizontal", enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "One or More fields are incorrect.", new { @class = "text-danger" })
                        <div class="row">
                            <div class="col-md-6 form-group">
                                <label id="lblFirstName" class="control-label col-md-4 small ">First Name:</label>
                                <div class="col-md-8 paddingLeftRight0">
                                    @Html.TextBoxFor(d => d.FirstName, null, new { ID = "txtFirstName", Class = "form-control", @required = "required" })
                                </div>
                            </div>
                            <div class="col-md-6 form-group">
                                <label id="lblLastName" class="control-label col-md-4 small ">Last Name:</label>
                                <div class="col-md-8 paddingLeftRight0">
                                    @Html.TextBoxFor(d => d.LastName, null, new { ID = "txtLastName", Class = "form-control", @required = "required" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 form-group">
                                <label id="lblUserName" class="control-label col-md-4 small ">User Name:</label>
                                <div class="col-md-8 paddingLeftRight0">
                                    @Html.TextBoxFor(d => d.UserName, null, new { ID = "txtUserName", Class = "form-control", @required = "required" })
                                </div>
                            </div>
                            <div class="col-md-6 form-group">
                                <label id="lblEmail" class="control-label col-md-4 small ">Email:</label>
                                <div class="col-md-8 paddingLeftRight0">
                                    @Html.TextBoxFor(d => d.Email, null, new { ID = "txtEmail", Class = "form-control", @required = "required" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 form-group">
                                <label id="lblPassword" class="control-label col-md-4 small ">Password:</label>
                                <div class="col-md-8 paddingLeftRight0">
                                    @Html.PasswordFor(d => d.Password, new { ID = "txtPassword", Class = "form-control", @required = "required" })
                                </div>
                            </div>
                            <div class="col-md-6 form-group">
                                <label id="lblConfirmPassword" class="control-label col-md-4 small ">Confirm Password:</label>
                                <div class="col-md-8 paddingLeftRight0">
                                    @Html.PasswordFor(d => d.ConfirmPassword, new { ID = "txtConfirmPassword", Class = "form-control", @required = "required" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 form-group">
                                <label class="control-label col-md-4 small "></label>
                                <div class="col-md-8 paddingLeftRight0">
                                </div>
                            </div>
                            <div class="col-md-6 form-group">
                                <label class="control-label col-md-4 small "></label>
                                <div class="col-md-8 paddingLeftRight0">
                                    <button type="submit" class="btn btn-primary btn-lg" disabled="disabled">Register</button>
                                    <button type="button" class="btn btn-warning btn-lg">Cancel</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </fieldset>
    </div>
</div>
@section Scripts {
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
    <script src="@Url.Content("~/Scripts/formValidation.min.js")"></script>
    <script src="@Url.Content("~/Scripts/bootstrap.framework.js")"></script>
    <script src="@Url.Content("~/Scripts/common.js")"></script>
    <script>
        //function OnSuccess(success) {
        //    if (success) {
        //        toastr.success("New User has been created Successfully.");
        //    }
        //}

        //function OnFailure() {
        //    toastr.error("Sorry! Something went wrong, please try again.");
        //}

        $(document).ready(function () {
            $('#formRegistration').on('init.field.fv', function (e, data) {
                var $icon = data.element.data('fv.icon'),
                    options = data.fv.getOptions(),
                    validators = data.fv.getOptions(data.field).validators;

                if (validators.notEmpty && options.icon && options.icon.required) {
                    $icon.addClass(options.icon.required).show();
                }
            }).formValidation({
                framework: 'bootstrap',
                icon: {
                    required: 'fa fa-asterisk',
                    valid: 'fa fa-check',
                    invalid: 'fa fa-times',
                    validating: 'fa fa-refresh'
                },
                fields: {
                    'FirstName': {
                        validators: {
                            notEmpty: {
                                message: 'The first name is required'
                            }
                        }
                    },
                    'LastName': {
                        validators: {
                            notEmpty: {
                                message: 'The last name is required'
                            }
                        }
                    },
                    'UserName': {
                        validators: {
                            notEmpty: {
                                message: 'The username is required'
                            },
                            stringLength: {
                                min: 8,
                                max: 30,
                                message: 'The username must be more than 6 and less than 30 characters long'
                            },
                            regexp: {
                                regexp: /^[a-zA-Z0-9_\.]+$/,
                                message: 'The username can only consist of alphabetical, number, dot and underscore'
                            }
                        }
                    },
                    'Email': {
                        validators: {
                            notEmpty: {
                                message: 'The email address is required'
                            },
                            emailAddress: {
                                message: 'The input is not a valid email address'
                            }
                        }
                    },
                    Password: {
                        validators: {
                            notEmpty: {
                                message: 'Password is required'
                            },
                            identical: {
                                field: 'ConfirmPassword',
                                message: 'The password and its confirm are not the same'
                            }
                        }
                    },
                    ConfirmPassword: {
                        validators: {
                            notEmpty: {
                                message: 'Confirm Password is required'
                            },
                            identical: {
                                field: 'Password',
                                message: 'The password and its confirm are not the same'
                            }
                        }
                    }
                }
            }).on('status.field.fv', function (e, data) {
                // Remove the required icon when the field updates its status
                var $icon = data.element.data('fv.icon'),
                    options = data.fv.getOptions(),                      // Entire options
                    validators = data.fv.getOptions(data.field).validators; // The field validators

                if (validators.notEmpty && options.icon && options.icon.required) {
                    $icon.removeClass(options.icon.required).addClass('fa');
                }
            }).on('success.field.fv', function (e, data) {
                if (data.fv.getInvalidFields().length > 0) {    // There is invalid field
                    data.fv.disableSubmitButtons(true);
                }
            }).on('success.form.fv', function (e) {
                debugger;
                // Prevent form submission
                //e.preventDefault();
            });
        });
    </script>
}